// Generated by CoffeeScript 1.4.0
var Edge, SocketIoEdge, ioClient,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Edge = require('../edge');

ioClient = require('socket.io-client');

SocketIoEdge = (function(_super) {

  __extends(SocketIoEdge, _super);

  function SocketIoEdge(connection, opts) {
    var _this = this;
    this.connection = connection;
    this.opts = opts != null ? opts : {};
    console.log('INIT Edge with opts:', opts);
    this.isClient = false;
    if (this.connection) {
      console.log("INIT protocol");
      this.connection.on('event:register', function(payload) {
        if (_this.opts.mode === 'root') {

        } else {
          _this.opts.uplink.send('event:edge:create', {
            a: {
              type: _this.opts.mode,
              globalId: _this.globalId()
            },
            b: payload
          });
        }
        return console.log("recieve:", 'event:register', payload);
      });
      this.connection.on('event:edge:create', function(payload) {
        var proxied;
        switch (_this.opts.mode) {
          case 'proxy':
            payload.proxied || (payload.proxied = []);
            payload.proxied.push(_this.globalId());
            return _this.opts.uplink.send('event:edge:create', payload);
          case 'root':
            proxied = 'none';
            if (payload.proxied) {
              proxied = payload.proxied[0];
            }
            return console.log("NEW EDGE %s:%s ---- %s:%s  proxied: %s ", payload.a.type, payload.a.globalId, payload.b.type, payload.b.globalId, proxied);
        }
      });
      return;
    }
    if (!(this.opts.connect && this.opts.connect.uri)) {
      throw 'SocketIoEdge requires connect.uri';
    }
  }

  SocketIoEdge.prototype.connect = function(onConnect) {
    var _mine;
    this.isClient = true;
    this.connection = ioClient.connect(this.opts.connect.uri);
    _mine = this;
    return this.connection.on('connect', function() {
      _mine.handshake();
      return onConnect(_mine);
    });
  };

  SocketIoEdge.prototype.send = function(event, payload) {
    console.log("send:", event, payload);
    return this.connection.emit(event, payload);
  };

  SocketIoEdge.prototype.localId = function() {
    if (!this.isClient) {
      return this.connection.id;
    }
    return this.connection.socket.sessionid;
  };

  return SocketIoEdge;

})(Edge);

module.exports = SocketIoEdge;
